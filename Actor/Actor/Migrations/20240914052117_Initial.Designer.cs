// <auto-generated />
using System;
using Actor.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Actor.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240914052117_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Actor.Infrastructure.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("PostId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Main Actor"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Support Actor"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Other"
                        });
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<decimal>("HirePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("HireTime")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityRecruit")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Actor"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Director"
                        });
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            CreateDate = new DateTime(2024, 9, 14, 12, 21, 17, 390, DateTimeKind.Local).AddTicks(3835),
                            Email = "admin@gmail.com",
                            Gender = 1,
                            PhoneNumber = "0397528860",
                            PictureUrl = "",
                            RoleId = 1,
                            Status = 2,
                            UserName = "Admin",
                            WalletId = 1
                        });
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Money = 1000000m
                        });
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Actor", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.User", "User")
                        .WithOne("Actor")
                        .HasForeignKey("Actor.Infrastructure.Entities.Actor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Application", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.Actor", "Actor")
                        .WithMany("Applications")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Actor.Infrastructure.Entities.Post", "Post")
                        .WithMany("Applications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Director", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.User", "User")
                        .WithOne("Director")
                        .HasForeignKey("Actor.Infrastructure.Entities.Director", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Notification", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.Actor", "Actor")
                        .WithMany("Notifications")
                        .HasForeignKey("ActorId");

                    b.HasOne("Actor.Infrastructure.Entities.Director", "Director")
                        .WithMany("Notifications")
                        .HasForeignKey("DirectorId");

                    b.Navigation("Actor");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Post", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Actor.Infrastructure.Entities.Director", "Director")
                        .WithMany("Posts")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Transaction", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.Application", "Application")
                        .WithOne("Transaction")
                        .HasForeignKey("Actor.Infrastructure.Entities.Transaction", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Actor.Infrastructure.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Actor.Infrastructure.Entities.Wallet", "Wallet")
                        .WithOne("User")
                        .HasForeignKey("Actor.Infrastructure.Entities.User", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Actor", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Application", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Director", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Post", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Actor");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Actor.Infrastructure.Entities.Wallet", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
